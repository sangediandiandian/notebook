Terraform
Terraform 是一个基础设施管理工具，允许您正确地构建、更改和管理基础设施。您可以将 Terraform 视为一种供应工具。它帮助您设置服务器、数据库和其他支持全面应用程序的基础设施。
Ansible
ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。

持续开发 – 持续开发涉及到计划、概述和引入新的代码。持续开发的目的是：优化代码的构建过程，并减少开发和部署之间的用时。
持续集成(CI) – DevOps实施的实践涉及到将开发的代码集成到中央存储库之中。在该存储库中，配置管理(CM)工具与测试开发工具相集成，以跟踪代码的开发状态。此外，CI还包括在测试和开发之间形成快速的反馈，以便能够识别和解决此过程中可能出现的各种代码问题。
持续测试 – 持续测试的目的是：加快代码向生产环境的交付。DevOps在此阶段涉及到更新应用程序的代码，并运行预定的、自动化的代码测试。
持续交付 – 持续交付旨在：快速、持续地交付那些将在生产环境中部署的更新和变更。持续交付可以确保：即使开发人员持续进行频繁的修改，其代码也能始终处于可部署的状态。
持续部署(CD) – 类似于持续交付，持续部署就是通过使用各种容器类技术工具(如：Docker和Kubernetes)，自动化地将新的、或修改好的代码发布到生产环境中。在此阶段中，维护不同部署环节中代码的一致性，显得尤为关键。
持续监控 – 此阶段涉及到对操作代码、以及支持代码的基础架构进行持续的监控。同时，我们也需要对生产环境中与应用部署相关的变更进行持续监控，以确保应用的稳定性，并具有最佳的性能。


1.建立一支胜任的DevOps团队
通常，在迁移到任何新的技术之前，我们首先需要正确地识别资源，并组建一支足以胜任IT项目各项挑战的团队。那么DevOps团队成员的基本素质就应当包括：找到问题根源的批判性思维，熟练使用最新DevOps工具和热衷于学习此类新工具的能力，以及能够进行故障排除和实验性解决问题的能力等。只有组建一支胜任的团队，企业才能够按需整理需求，计划实施路径，部署软件，并最终实现完美的软件交付。
2.制定可靠的DevOps策略
基于如下六个方面的参数，实施DevOps策略：
快速执行 - 任何组织计划的最终目标都是为了：在不断创新的基础上，实现更快速度的执行，以提高客户的满意度。那么，DevOps实践环节中的持续部署，就能够确保交付的准确性和速度。
可扩展性 – 基础架构即代码(Infrastructure-as-code)的实践能够协助在软件产品生命周期的各个阶段(包括开发、测试和产品交付)，进行可扩展式的精确管理。这对于DevOps的成功实施是至关重要的。
可靠性 – DevOps的持续集成、持续测试和持续交付等实践，能够通过确保安全和高质量的输出，来提供良好的最终用户体验，以及操作上的可靠性。
协作 – 通过有效的跨团队协作和沟通，DevOps能够消除低效的流程、有限的管理时间、以及项目失败的可能。
频繁交付 – DevOps的持续交付、集成和部署实践，可以实现快速的交付周期，缩短实施过程中必要的恢复时间，从而进一步为创新留出更多的时间。
安全性 – 各种自动化的合规性策略、以及配置管理技术，使得DevOps模型可以通过基础架构即代码和策略即代码(policy as code)的实践，来获得更大的安全性。
3.从小处做起
我们可以从小规模的项目开始，然后逐步转移到全方位的DevOps上。通过小规模的变更，我们可以检验对于测试和部署的管理效果。在此基础上，我们根据其效果，再决定下一步是否实施组织级别的DevOps。
4.尽可能地自动化
DevOps的基础源于快速执行的能力。通过精心选择自动化的工具，我们可以避免重复性的手动交付，实现更快速的流程执行，进而节省项目参与者的时间、精力和整体预算。
5.准备合适的环境
准备合适的持续测试与交付环境，对于DevOps的成功实施同样至关重要。哪怕是对于应用程序的细微修改，我们也应该准备一个稳定的测试与交付环境，以确保根据自动化的测试结果，是否将更改或添加后的代码快速地部署到生产环境中。
6.选择合适的工具并构建强大的通用性基础架构
在DevOps的实施过程中，同样关键步骤是：基于自身特有IT环境的兼容性，选择合适的工具，以实现平稳的集成。通过合适的工具集，您可以使用自定义的工作流、以及访问控制，来构建出强大的基础架构和流畅的功能集。

DevOps工具链
目前，业界有许多DevOps工具，可以帮助用户简化和自动化软件的交付管道，以及工作流程的不同阶段，并最终确保有效的实施。按照如下的生命周期划分方式，我们在此罗列出每一个阶段的DevOps专有工具，供您参考、测试与选择。
计划：这是定义业务价值和需求的重要阶段。
工具示例 - Git，Jira
· 编码：涉及到软件的设计，以及代码创建的详细过程。
工具示例 - Stash，GitHub，GitLab
· 构建：此阶段主要是在自动化工具的帮助下，管理各种软件的构建和版本。因此自动化的工具将协助编译和打包代码，以供将来发布到生产环境中。
工具示例 - Docker，Puppet，Chef，Ansible，Gradle
· 测试：这是确保代码质量的持续测试阶段。
工具示例 - Vagrant，Selenium，JUnit，Codeception，BlazeMeter，TestNG
· 部署：这是管理、计划、协调、以及将各种产品自动发布到生产环境中的阶段。
工具示例 – Jenkins，Kubernetes，Docker，OpenShift，OpenStack，Jira
· 监视：该阶段主要是在生产环境中识别和收集已发布的软件相关问题与信息。
工具示例 - Nagios，Splunk，Slack，New Relic，Datadog，Wireshark


目前，由于没有哪一种工具可以包括所有的开发和交付阶段，因此我们需要在了解自身流程的基础上，通过不同的工具来为企业建立合适的DevOps文化。下面我们来一起讨论那些适合于软件开发不同阶段的12种DevOps工具：
1.Jenkins
Jenkins是在软件开发领域广为采用的一种非常出色的DevOps自动化工具。从本质上说，它是一款开源的CI/CD服务器，可以在交付流程的不同阶段实现自动化。凭借着其庞大的插件生态系统(超过1000个)，Jenkins可以与包括Puppet、Docker和Chef在内的多种DevOps工具相集成。
Jenkins的特点：
可以根据用户的个人需要，来设置和定制CD管道。
可以在Windows、Linux和macOS X上运行，因此上手比较容易。
能够以更快的速度迭代和部署新的代码。
2.Git
Git是一种分布式源代码管理类(SCM，source code management)DevOps工具，目前正在被广泛地应用于软件开发行业。它既可以使用户轻松地跟踪开发工作的进度，又可以根据已保存的、不同版本的源代码，按需恢复到某一个特定的版本。
Git的特点：
作为一款免费的开源工具，它支持签入、合并、标签、提交、分支等多种版本控制类型的操作。
提供诸如Github或Bitbucket的托管库，可供最多五名团队成员免费、且无限地使用。
易于学习，可以通过Git将分支源代码轻松地合并到一起。
3.Nagios
Nagios是最受欢迎的免费开源DevOps监视工具之一，它能够通过实时地监控基础架构，来轻松地识别各种安全威胁，检测不同的中断与错误。另外，Nagios也能够提供图形化的报告。
Nagios的特点：
不但免费开源，而且提供各种附加的组件。
简化了基于代理和无代理，这两种服务器的监控方法。
能够监控Windows、UNIX、Linux和其他Web应用程序。
提供多种版本的子工具，其中包括：
Nagios Core – 命令行工具。
Nagios XI – 基于Web的GUI。
Log Server – 使用自动化的警报方式来搜索日志数据。
Nagios Fusion – 可用于同时进行多个网络的监控。
4.Splunk
通过向DevOps团队提供智能化的操作，Splunk能够获取各类实用的机器数据，进而提高公司的生产力、竞争力和安全性。
Splunk的特点：
通过对计算机生成的数据进行以数据为驱动的分析，进而提供各种可行性的洞见。
能够针对IT服务提供更为集中化的视图。
能够通过快速的检测模式，来突显异常和受影响的区域。
5.Docker
作为在DevOps领域使用最为广泛的容器化开发工具，Docker为云服务原生的、和那些遗留的应用，提供了独立于平台的集成化容器。它能够在确保安全性的基础上，实现敏捷式的操作。
Docker的特点：
能够轻松地实现应用程序的自动化部署，并能够简化分布式的开发。
Google Cloud和AWS均能够提供对Docker的内置支持。
Docker容器不但能够支持虚拟机的环境，并且与平台无关。
6.Kubernetes
Kubernetes是大型团队常用的一款DevOps工具。它能够基于Docker的容器化，来实现构建，并能够通过逻辑分类对容器进行分组。
Kubernetes的特点：
可以通过自动分发，来部署多台计算机。
是第一款容器编排类工具。
在简化大型团队所开发的复杂项目时非常实用。
7.Ansible
由YAML编写的Ansible，是一款针对无代理设计的管理和组织工具。DevOps团队可以使用它来更加轻松地扩展自动化的流程，并提高生产率。
Ansible的特点：
基于主从的架构。
其编排模块被设计为Playbook。
非常适合管理复杂的部署，并能够加快开发的过程。
8.Vagrant
作为一款流行的DevOps工具，Vagrant可以与其他管理类工具结合使用，以实现在同一工作流程中创建虚拟机的环境。如今，许多组织都开始使用Vagrant，来实现向DevOps文化的转换。
Vagrant的特点：
可以与包括Windows、Linux和Mac在内的不同操作系统一起使用。
可以轻松地与Chef、Puppet、Ansible等DevOps工具集成使用。
9.Gradle
Gradle是一款功能极为丰富的DevOps工具。其用户可以使用C ++、Java和Python等语言来编写代码。各大流行的IDE(如：Netbeans、Eclipse和IntelliJ IDEA)都能够支持它。
Gradle的特点：
其核心模型是基于任务-动作、输入和输出的。
使用基于Groovy的DSL、以及基于Kotlin的DSL来描述构建。
其增量式构建能够节省用户大量的编译时间。
10.Chef
Chef是一款比较流行的、基于Ruby的编排管理工具。它主要被用于检查配置，以及自动化基础架构。
Chef的特点：
有助于实现持续标准化，并能加强配置。
通过自动化整个过程，以确保系统配置的正确性。
能够确保配置策略的灵活性、可读性和可测试性。
11.Worksoft
作为另一种流行的DevOps工具，Worksoft可以为Web和云端应用程序提供各种支持。它具有一套完备的生态系统，适用于那些横跨整个持续交付流程的各类企业级应用。
Worksoft的特点：
能够将UI和端到端的测试，集成到CI的管道中，进而加速整个流程。
允许大中型企业创建基于风险的持续测试管道。这些管道可以被导入应用程序的生产环境，以实现可扩展性。
提供与各种第三方解决方案的集成，以方便用户选择适合自身需求的工具，并在整个DevOps的发布周期中无缝地管理各项任务。
12.Puppet
Puppet是一款可用于部署、配置和管理服务器的开源工具。
Puppet的特点：
它提供了主从的结构。
可以在混合基础架构和应用程序中流畅运行。
与Windows、Linux和UNIX操作系统相兼容。
由Technavio进行的最新研究显示：从2016年到2020年，全球DevOps市场的复合年增长率(CAGR，Compound Annual Growth Rate)已高达19%。这足以突显全球各类企业对于实施DevOps的热情。为了确保DevOps流程的成功实施，我们必须制定可靠的DevOps策略，并选择与现有开发环境相匹配的DevOps工具。而面对当前市场上林林总总的DevOps工具，我们逐一进行配置、测试、以及试验显然是相当耗费时间的。希望您能够将上述所列举的12种DevOps工具收入自己的工具谱中，以便按需进行选用。


###超融合基础架构###
超融合基础架构（Hyper Converged Infrastructure，或简称“HCI”）是指在同一套单元设备中不仅仅具备计算、网络、存储和服务器虚拟化等资源和技术，而且还包括备份软件、快照技术、
重复数据删除、在线数据压缩等元素，而多套单元设备可以通过网络聚合起来，实现模块化的无缝横向扩展（scale-out），形成统一的资源池。超融合（甚至超超融合）在本地很容易实现：
将计算、网络和存储都集成在一个设备内，并且通过它由供应商预先配置好且差不多到手就可以使用。HCI是实现“软件定义数据中心”（SDDC）的终极技术途径。HCI类似Google、
Facebook后台的大规模基础架构模式，可以为数据中心带来最优的效率、灵活性、规模、成本和数据保护。

超融合技术主要组件有三大组成部分：计算虚拟化、存储虚拟化、网络虚拟化。计算虚拟化四大主流路线有KVM、VMWARE、Hyper-V、Xen，存储虚拟化两大主流路线glustfs、ceph，
网络虚拟化一般采用自研的方式，主要技术有VxLAN、SDN等。

组成
超融合系统将存储和计算功能集成到一个单一节点（或节点集群，每个节点都提供计算和存储功能），超融合系统都具有以下通用核心组件：
（1）分布式存储系统：构建在虚拟化平台之上，在服务器虚拟化基础上，通过部署存储虚拟设备的方式，对本地存储资源进行虚拟化，再经集群整合成资源池，为应用虚拟机提供存储服务。 
（2）高速网络：GE/10GE以太网交换机，或者Infiniband光纤交换机为分布式计算和存储集群提供可扩展和高可用性的网络通道。 
（3）统一管理平台：其管理程序除了提供硬盘或SSD硬件抽象层之外，还提供工作负载邻接、冗余、故障迁移、管理和容器化作用。 
因此，超融合架构可以基于X86服务器等低单价企业服务器为基础，对服务器的内置硬盘资源进行虚拟化，提供raid后的存储空间供服务器使用。服务器采用集群的方式部署在数据中心的多个机架内，
通过机架间及机架内的高速二层交换网络提供极高的连接可靠性。整个超融合集群系统，以一个2UX86机架服务器提供40TB裸容量为例，一个100个服务器组成的集群可以提供4PB的存储容量，
可满足90%以上企业的业务增长需求。通过批量采购的商用服务器可使基于超融合架构建设的数据中心可具有较高的性价比。 

特点
超融合基础架构继承了融合式架构的一些特性，同样都是使用通用硬件服务器为基础，将多台服务器组成含有跨节点统一储存池的群集，来获得整个虚拟化环境需要的效能、容量扩展性与数据可用性，
可透过增加群集中的节点数量，来扩充整个群集的运算效能与储存空间，并透过群集各节点间的彼此数据复制与备份，提供服务高可用性与数据保护能力。而为能灵活地调配资源，
超融合架构也采用了以虚拟机(VM)为核心，软件定义方式来规画与运用底层硬件资源，然后向终端用户交付需要的资源。
1、运算单元与储存单元的融合
传统的存储区域网络架构使用的运算和储存单元是分离的。传统的服务器外接SAN交换机、储存设备等，超融合架构则将运算和储存单元合二为一。这样每个服务器节点单元同时可提供运算资源和储存空间，
每一台超融合架构的服务器节点就相当于传统服务器外接SAN交换机和储存设备，即使用服务器节点的磁盘驱动器来提供需要的储存空间。
2、实际的硬件资源与虚拟化平台的完整融合
超融合架构是通过虚拟化平台软件来合理硬件资源的，运算资源和储存资源都是通过虚拟机来合理调配使用，是一种以虚拟机为核心的虚拟化应用。另外，
超融合架构的运算资源和储存资源都是软件定义化的，硬件部份只是一台普通的通用硬件服务器，用户使用的虚拟机与储存空间完全依靠Hypervisor等软件所构建，隔绝了用户与底层的物理设备。
3、更易于管理的超融合架构
在融合式架构中，由于运算与储存资源是由各自独立的服务器与储存设备来提供，操作管理也是独立的，管理者必须分别透过不同的管理工具来管理这两种设备。管理者须在储存设备上从LUN、
连接映像等这些设定着手，然后再将设定好的储存装置挂载到服务器主机上，通过Hypervisor提供给VM使用。超融合架构，运算与储存二合一，只需单一的平台就可同时管理运算和储存资源的设定。
用户可根据自身需要来设定运算与储存资源的服务等级，实际资源的分配可由管理平台自动完成，管理变得轻松而简单。
4、纵向构建和横向扩展
超融合架构由于把运算与储存融合在一台设备，每台超融合设备都含有独立、完整的运算、储存硬件资源，所以每台设备也就构成了一个独立的基础单元。通过丛集架构，
用户可以以一台超融合设备为单元，以堆叠的方式将更多的节点加入到丛集中，来扩展整个超融合架构丛集的容量。 

关键技术编辑
1、服务器虚拟化
服务器虚拟化是整个超融合架构中的核心组件，基于裸金属架构的虚拟化程序直接运行在服务器上，实现对
超融合基础架构
超融合基础架构
服务器物理资源的抽象，将CPU、内存、硬盘等服务器物理资源转化为一组可统一管理、调度和分配的逻辑资源，并基于这些逻辑资源在单个物理服务器上构建多个同时运行、相互隔离的虚拟机执行环境，实现更高的资源利用率，减少系统管理的复杂度，加快对业务需求的响应速度，提供高可靠、高可用的应用服务。 [5] 
2、存储虚拟化
存储虚拟化是将集群各节点服务器上独立的硬盘存储空间进行组织聚合，构成一个共享的存储资源池，所有的存储资源在这个存储池中统一管理，实现存储资源的自动化管理和分配，构建高效灵活的存储架构与管理平台，提供高可靠、高性能存储。存储虚拟化基于分布式存储系统，融合了分布式缓存、SSD读写缓存加速、多副本机制等多种存储技术，在功能上与独立共享存储完全一致。存储虚拟化通过SSD缓存，可以大幅提升服务器硬盘的I/O性能，实现高性能存储和业务高效可靠运行。存储虚拟化采用多副本机制，一份数据同时存储在多个不同的物理服务器硬盘上，提升数据可靠性，保障关键业务安全稳定运行。此外，由于存储和计算完全融合在一台服务器上，省却了外置磁盘阵列的控制器、光纤交换机等设备，达到了降低成本的目的。 [5] 
3、网络虚拟化
网络虚拟化通过实现网络中所需的各类网络连接服务(包括路由、交换、安全、负载均衡等)按需分配和灵活调度，提供了全新的网络连接运维模式，解决了传统硬件网络的众多管理和运维难题，可满足业务应用对网络快速、灵活自动化部署的需求。 [5]


优势
1、极简的架构
超融合架构直接将存储分散部署到每台PC服务器上，在服务器上部署了快速的闪存盘和大容量传统机械磁盘，来应对系统高IO需求和大容量存储的需要。因此，超融合架构能实现高速访问本地数据，
无需跨网络访问。超融合架构还包括备份软件、快照技术、重复数据删除、在线数据压缩等元素，多套单元设备可以通过网络聚合起来，实现模块化的无缝横向扩展（scale-out），形成统一的资源池，
它的扩展方式变为横向增加节点即可。通过这种标准化的模块，用来搭建数据中心无疑是非常方便的，这不仅大大方便客户的搭建管理，同时也增强了系统的灵活性，同时让部署和运维都更简单。 
（1）让系统更灵活
随着云计算和大数据时代的来临，企业需要IT系统能够快速的跟上业务需求。超融合让系统的扩展更灵活。客户只需要根据需求购买相同的配置，就可以快速的实现IT系统的扩展。 
（2）部署更简单
超融合在于对服务器、存储、网络的融合，由于采用开箱即用的部署方式，大大简化规划、连接、配置等复杂的管理操作。像乐高积木一样，只需要相同的模块，根据客户的需求，
就可以搭建出各种各样的模型。乐高积木就相当于超融合，而搭建出来的模型就是数据中心。交付时间可以从过去的十几天缩短到一两天，大大缩短交付的时间。
（3）运维更简单
与传统架构相比，超融合架构管理更为简单，传统架构下，虚拟化、服务器、存储、网络四层需要分别进行管理配置，非常的复杂和繁琐，超融合将这些功能集成到一个用户界面上，
用户可以在一个运维界面上，实现计算和存储的资源池化、CPU/内存/存储等资源的动态分配、虚拟机的创建和启动，给用户带来极大的便利。总的来说就是，超融合架构具备了统一的系统管理、
监控、维护等特点。
2、高可靠性
通过全部功能组件的全部软件定义，企业级云实现了硬件无关的分布式架构，可以做到硬件故障不影响业务。平台内嵌的CDP功能，当管理员误删除数据库或业务系统遭遇勒索病毒时，
可将数据一键恢复到过去3天内的任意1秒。DRX/DRS智能调度技术，保障业务不因资源不足而导致不可用。 
3、高性能
企业级云通过分布式存储分层技术、逻辑条带化技术，以及通过优化NUMA和大页内存技术等，充分满足互联网业务、实时交易系统、BI分析等业务，以及OracleRAC、MySQL等数据库集群和ERP、MES、
HIS等关键应用对性能的高需求。 
4、高安全性
企业级云能够为用户提供平台安全、数据安全、应用安全、边界安全+云端安全的4+1立体式安全防护体系，由内而外构建数据中心坚固的安全防护堡垒。当用户有安全合规需求时，
通过安全中心提供完整的安全规划建议、安全建设模板，真正做到安全可视，帮助用户快速构建自己的云安全体系。 
5、高性价比
采用超融合架构，用户的整体拥有成本（TCO）将明显降低；利用超融合设备，不但可以快速搭建出一个数据中心，更重要的是，利用超融合这种方式，能够让客户在搭建过程更方便，
客户不需要再对基础设施进行调研，只需要了解自己的需求，同时了解到超融合设备，这样就能够快速的实现搭建。在应用方面无疑大大节省了企业的成本。



###超融合基础架构###

云计算学习教程（还有linux、shell）
http://c.biancheng.net/cloud_computing/

