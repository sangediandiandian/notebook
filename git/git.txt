1、安装git后配置
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
2、初始化
git init
3、把文件添加到仓库
git add
4、把文件提交到仓库
git commit -m "wrote a readme file"
5、显示从最近到最远的提交日志
git log --pretty=oneline
6、版本回退：HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
git reset --hard HEAD^
git reset --hard <commit id>
7、记录命令、查看状态
git reflog、git status
8、撤销修改
丢弃工作区的修改时：git checkout -- <file>
丢弃暂存区的修改时：git reset HEAD <file>
9、删除文件
git rm <file>
10、添加远程库
要关联一个远程库，使用命令git remote add origin <ssh>
关联后，使用命令git push -u origin master第一次推送master分支的所有内容
11、从远程库克隆
git clone <ssh>
12、创建与合并分支
创建分支：git branch <branch name>
切换分支：git checkout <branch name> 或 git switch <branch name>
创建并切换：git checkout -b <branch name> 或 git switch -c <branch name>
查看当前分支：git branch
合并指定分支到当前分支：git merge <branch name>
删除分支：git branch -d <branch name>
13、解决冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成；解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图
14、分支管理策略
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
git merge --no-ff -m "merge with no-ff" <branch name>
15、Bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop（git stash apply 恢复+git stash drop 删除），回到工作现场
git stash、git checkout master、git checkout -b issue-101、git add readme.txt 、git commit -m "fix bug 101"
git switch master、git merge --no-ff -m "merged bug fix 101" issue-101、git switch dev、git status、git stash list
git stash pop、git stash list
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动
git branch、git cherry-pick 4c805e2
16、Feature分支
开发一个新feature，最好新建一个分支，如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除
git switch -c feature-vulcan、git add vulcan.py、git status、git commit -m "add feature vulcan"
git switch dev、git branch -d feature-vulcan、git branch -D feature-vulcan
17、多人协作
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
18、Rebase（变基）
git rebase、git log --graph --pretty=oneline --abbrev-commit
19、创建标签
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息
命令git tag可以查看所有标签，用git show <tagname>查看标签信息
20、操作标签
命令git push origin <tagname>可以推送一个本地标签
命令git push origin --tags可以推送全部未推送过的本地标签
命令git tag -d <tagname>可以删除一个本地标签
命令git push origin :refs/tags/<tagname>可以删除一个远程标签
21、忽略特殊文件
新建.gitignore文件，所有配置:https://github.com/github/gitignore
22、配置别名
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
23、搭建github服务器
操作系统推荐用Ubuntu或Debian，要方便管理公钥，用Gitosis；要像SVN那样变态地控制权限，用Gitolite。
第一步，安装git：
$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git
第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git
第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git

